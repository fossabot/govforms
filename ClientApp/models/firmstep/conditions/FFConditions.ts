/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* start 
* 	:= e=expression
* expression 
* 	:= v=stringExpression tail=tail*
* tail
*     := '\(' expression '\)' | orExpression | andExpression | equalsExpression | notEqualsExpression | isExpression | isntExpression
* orExpression
* 	:= '||' _ rightBool=expression
*     
* andExpression 
* 	:= '&&' _ rightBool=expression
*     
* equalsExpression
* 	:= '=' _ right=stringExpression
*     
* notEqualsExpression 
* 	:= '\<\>|!=' _ right=stringExpression
*     
* isExpression 
* 	:= 'is' _ right=stringExpression
*     
* isntExpression 
* 	:= 'isnt' _ right=stringExpression
*     
* _ 
* 	:= '[ \t]*'
* __
* 	:= '[ \t]+'
* stringExpression 
* 	:= fieldName | stringLiteral
* fieldName 
* 	:= '{' fieldName='[^}]+' '}'
*     
* stringLiteral :=
* 	'\'' value='[^\']*' '\''
*/
type Nullable<T> = T | null;
type $$RuleType<T> = (log?: (msg: string) => void) => Nullable<T>;
export interface ContextRecorder {
    record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]): void;
}
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    expression = "expression",
    tail_1 = "tail_1",
    tail_2 = "tail_2",
    tail_3 = "tail_3",
    tail_4 = "tail_4",
    tail_5 = "tail_5",
    tail_6 = "tail_6",
    tail_7 = "tail_7",
    orExpression = "orExpression",
    andExpression = "andExpression",
    equalsExpression = "equalsExpression",
    notEqualsExpression = "notEqualsExpression",
    isExpression = "isExpression",
    isntExpression = "isntExpression",
    _ = "_",
    __ = "__",
    stringExpression_1 = "stringExpression_1",
    stringExpression_2 = "stringExpression_2",
    fieldName = "fieldName",
    stringLiteral = "stringLiteral",
}
export interface start {
    kind: ASTKinds.start;
    e: expression;
}
export interface expression {
    kind: ASTKinds.expression;
    v: stringExpression;
    tail: tail[];
}
export type tail = tail_1 | tail_2 | tail_3 | tail_4 | tail_5 | tail_6 | tail_7;
export interface tail_1 {
    kind: ASTKinds.tail_1;
}
export type tail_2 = orExpression;
export type tail_3 = andExpression;
export type tail_4 = equalsExpression;
export type tail_5 = notEqualsExpression;
export type tail_6 = isExpression;
export type tail_7 = isntExpression;
export interface orExpression {
    kind: ASTKinds.orExpression;
    rightBool: expression;
}
export interface andExpression {
    kind: ASTKinds.andExpression;
    rightBool: expression;
}
export interface equalsExpression {
    kind: ASTKinds.equalsExpression;
    right: stringExpression;
}
export interface notEqualsExpression {
    kind: ASTKinds.notEqualsExpression;
    right: stringExpression;
}
export interface isExpression {
    kind: ASTKinds.isExpression;
    right: stringExpression;
}
export interface isntExpression {
    kind: ASTKinds.isntExpression;
    right: stringExpression;
}
export type _ = string;
export type __ = string;
export type stringExpression = stringExpression_1 | stringExpression_2;
export type stringExpression_1 = fieldName;
export type stringExpression_2 = stringLiteral;
export interface fieldName {
    kind: ASTKinds.fieldName;
    fieldName: string;
}
export interface stringLiteral {
    kind: ASTKinds.stringLiteral;
    value: string;
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public matchstart($$dpth: number, $$cr?: ContextRecorder): Nullable<start> {
        return this.runner<start>($$dpth,
            (log) => {
                if (log) {
                    log("start");
                }
                let $scope$e: Nullable<expression>;
                let $$res: Nullable<start> = null;
                if (true
                    && ($scope$e = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.start, e: $scope$e};
                }
                return $$res;
            }, $$cr)();
    }
    public matchexpression($$dpth: number, $$cr?: ContextRecorder): Nullable<expression> {
        return this.runner<expression>($$dpth,
            (log) => {
                if (log) {
                    log("expression");
                }
                let $scope$v: Nullable<stringExpression>;
                let $scope$tail: Nullable<tail[]>;
                let $$res: Nullable<expression> = null;
                if (true
                    && ($scope$v = this.matchstringExpression($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<tail>(() => this.matchtail($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression, v: $scope$v, tail: $scope$tail};
                }
                return $$res;
            }, $$cr)();
    }
    public matchtail($$dpth: number, $$cr?: ContextRecorder): Nullable<tail> {
        return this.choice<tail>([
            () => this.matchtail_1($$dpth + 1, $$cr),
            () => this.matchtail_2($$dpth + 1, $$cr),
            () => this.matchtail_3($$dpth + 1, $$cr),
            () => this.matchtail_4($$dpth + 1, $$cr),
            () => this.matchtail_5($$dpth + 1, $$cr),
            () => this.matchtail_6($$dpth + 1, $$cr),
            () => this.matchtail_7($$dpth + 1, $$cr),
        ]);
    }
    public matchtail_1($$dpth: number, $$cr?: ContextRecorder): Nullable<tail_1> {
        return this.runner<tail_1>($$dpth,
            (log) => {
                if (log) {
                    log("tail_1");
                }
                let $$res: Nullable<tail_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.matchexpression($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.tail_1, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchtail_2($$dpth: number, $$cr?: ContextRecorder): Nullable<tail_2> {
        return this.matchorExpression($$dpth + 1, $$cr);
    }
    public matchtail_3($$dpth: number, $$cr?: ContextRecorder): Nullable<tail_3> {
        return this.matchandExpression($$dpth + 1, $$cr);
    }
    public matchtail_4($$dpth: number, $$cr?: ContextRecorder): Nullable<tail_4> {
        return this.matchequalsExpression($$dpth + 1, $$cr);
    }
    public matchtail_5($$dpth: number, $$cr?: ContextRecorder): Nullable<tail_5> {
        return this.matchnotEqualsExpression($$dpth + 1, $$cr);
    }
    public matchtail_6($$dpth: number, $$cr?: ContextRecorder): Nullable<tail_6> {
        return this.matchisExpression($$dpth + 1, $$cr);
    }
    public matchtail_7($$dpth: number, $$cr?: ContextRecorder): Nullable<tail_7> {
        return this.matchisntExpression($$dpth + 1, $$cr);
    }
    public matchorExpression($$dpth: number, $$cr?: ContextRecorder): Nullable<orExpression> {
        return this.runner<orExpression>($$dpth,
            (log) => {
                if (log) {
                    log("orExpression");
                }
                let $scope$rightBool: Nullable<expression>;
                let $$res: Nullable<orExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:||)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rightBool = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.orExpression, rightBool: $scope$rightBool};
                }
                return $$res;
            }, $$cr)();
    }
    public matchandExpression($$dpth: number, $$cr?: ContextRecorder): Nullable<andExpression> {
        return this.runner<andExpression>($$dpth,
            (log) => {
                if (log) {
                    log("andExpression");
                }
                let $scope$rightBool: Nullable<expression>;
                let $$res: Nullable<andExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:&&)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rightBool = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.andExpression, rightBool: $scope$rightBool};
                }
                return $$res;
            }, $$cr)();
    }
    public matchequalsExpression($$dpth: number, $$cr?: ContextRecorder): Nullable<equalsExpression> {
        return this.runner<equalsExpression>($$dpth,
            (log) => {
                if (log) {
                    log("equalsExpression");
                }
                let $scope$right: Nullable<stringExpression>;
                let $$res: Nullable<equalsExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchstringExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.equalsExpression, right: $scope$right};
                }
                return $$res;
            }, $$cr)();
    }
    public matchnotEqualsExpression($$dpth: number, $$cr?: ContextRecorder): Nullable<notEqualsExpression> {
        return this.runner<notEqualsExpression>($$dpth,
            (log) => {
                if (log) {
                    log("notEqualsExpression");
                }
                let $scope$right: Nullable<stringExpression>;
                let $$res: Nullable<notEqualsExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\<\>|!=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchstringExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.notEqualsExpression, right: $scope$right};
                }
                return $$res;
            }, $$cr)();
    }
    public matchisExpression($$dpth: number, $$cr?: ContextRecorder): Nullable<isExpression> {
        return this.runner<isExpression>($$dpth,
            (log) => {
                if (log) {
                    log("isExpression");
                }
                let $scope$right: Nullable<stringExpression>;
                let $$res: Nullable<isExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:is)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchstringExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.isExpression, right: $scope$right};
                }
                return $$res;
            }, $$cr)();
    }
    public matchisntExpression($$dpth: number, $$cr?: ContextRecorder): Nullable<isntExpression> {
        return this.runner<isntExpression>($$dpth,
            (log) => {
                if (log) {
                    log("isntExpression");
                }
                let $scope$right: Nullable<stringExpression>;
                let $$res: Nullable<isntExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isnt)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchstringExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.isntExpression, right: $scope$right};
                }
                return $$res;
            }, $$cr)();
    }
    public match_($$dpth: number, $$cr?: ContextRecorder): Nullable<_> {
        return this.regexAccept(String.raw`(?:[ \t]*)`, $$dpth + 1, $$cr);
    }
    public match__($$dpth: number, $$cr?: ContextRecorder): Nullable<__> {
        return this.regexAccept(String.raw`(?:[ \t]+)`, $$dpth + 1, $$cr);
    }
    public matchstringExpression($$dpth: number, $$cr?: ContextRecorder): Nullable<stringExpression> {
        return this.choice<stringExpression>([
            () => this.matchstringExpression_1($$dpth + 1, $$cr),
            () => this.matchstringExpression_2($$dpth + 1, $$cr),
        ]);
    }
    public matchstringExpression_1($$dpth: number, $$cr?: ContextRecorder): Nullable<stringExpression_1> {
        return this.matchfieldName($$dpth + 1, $$cr);
    }
    public matchstringExpression_2($$dpth: number, $$cr?: ContextRecorder): Nullable<stringExpression_2> {
        return this.matchstringLiteral($$dpth + 1, $$cr);
    }
    public matchfieldName($$dpth: number, $$cr?: ContextRecorder): Nullable<fieldName> {
        return this.runner<fieldName>($$dpth,
            (log) => {
                if (log) {
                    log("fieldName");
                }
                let $scope$fieldName: Nullable<string>;
                let $$res: Nullable<fieldName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && ($scope$fieldName = this.regexAccept(String.raw`(?:[^}]+)`, $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.fieldName, fieldName: $scope$fieldName};
                }
                return $$res;
            }, $$cr)();
    }
    public matchstringLiteral($$dpth: number, $$cr?: ContextRecorder): Nullable<stringLiteral> {
        return this.runner<stringLiteral>($$dpth,
            (log) => {
                if (log) {
                    log("stringLiteral");
                }
                let $scope$value: Nullable<string>;
                let $$res: Nullable<stringLiteral> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\')`, $$dpth + 1, $$cr) !== null
                    && ($scope$value = this.regexAccept(String.raw`(?:[^\']*)`, $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\')`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.stringLiteral, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null && this.finished();
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res && this.finished()) {
            return new ParseResult(res, null);
        }
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.matchstart(0, rec);
        return new ParseResult(res,
            rec.getErr() ?? new SyntaxErr(this.mark(), new Set(["$EOF"]), new Set([])));
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private runner<T>($$dpth: number, fn: $$RuleType<T>, cr?: ContextRecorder): $$RuleType<T> {
        return () => {
            const mrk = this.mark();
            const res = cr ? (() => {
                const extraInfo: string[] = [];
                const result = fn((msg: string) => extraInfo.push(msg));
                cr.record(mrk, $$dpth, result, this.negating, extraInfo);
                return result;
            })() : fn();
            if (res !== null) {
                return res;
            }
            this.reset(mrk);
            return null;
        };
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ContextRecorder): Nullable<string> {
        return this.runner<string>(dpth,
            (log) => {
                if (log) {
                    if (this.negating) {
                        log("$$!StrMatch");
                    } else {
                        log("$$StrMatch");
                    }
                    // We substring from 3 to len - 1 to strip off the
                    // non-capture group syntax added as a WebKit workaround
                    log(match.substring(3, match.length - 1));
                }
                const reg = new RegExp(match, "y");
                reg.lastIndex = this.mark().overallPos;
                const res = reg.exec(this.input);
                if (res) {
                    let lineJmp = 0;
                    let lind = -1;
                    for (let i = 0; i < res[0].length; ++i) {
                        if (res[0][i] === "\n") {
                            ++lineJmp;
                            lind = i;
                        }
                    }
                    this.pos = {
                        overallPos: reg.lastIndex,
                        line: this.pos.line + lineJmp,
                        offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
                    };
                    return res[0];
                }
                return null;
            }, cr)();
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export class ParseResult {
    public ast: Nullable<start>;
    public err: Nullable<SyntaxErr>;
    constructor(ast: Nullable<start>, err: Nullable<SyntaxErr>) {
        this.ast = ast;
        this.err = err;
    }
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export class SyntaxErr {
    public pos: PosInfo;
    public exprules: string[];
    public expmatches: string[];
    constructor(pos: PosInfo, exprules: Set<string>, expmatches: Set<string>) {
        this.pos = pos;
        this.exprules = [...exprules];
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Tried to match rules ${this.exprules.join(", ")}. Expected one of ${this.expmatches.map((x) => ` '${x}'`)}`;
    }
}
class ErrorTracker implements ContextRecorder {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private mnd: number = -1;
    private prules: Set<string> = new Set();
    private pmatches: Set<string> = new Set();
    public record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]) {
        if ((result === null) === negating) {
            return;
        }
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.mnd = depth;
            this.pmatches.clear();
            this.prules.clear();
        } else if (pos.overallPos === this.mxpos.overallPos && depth < this.mnd) {
            this.mnd = depth;
            this.prules.clear();
        }
        if (this.mxpos.overallPos === pos.overallPos && extraInfo.length >= 2) {
            if (extraInfo[0] === "$$StrMatch") {
                this.pmatches.add(extraInfo[1]);
            }
            if (extraInfo[0] === "$$!StrMatch") {
                this.pmatches.add(`not ${extraInfo[1]}`);
            }
        }
        if (this.mxpos.overallPos === pos.overallPos && this.mnd === depth) {
            extraInfo.forEach((x) => { if (x !== "$$StrMatch" && x !== "$$!StrMatch") { this.prules.add(x); } });
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1) {
            return new SyntaxErr(this.mxpos, this.prules, this.pmatches);
        }
        return null;
    }
}